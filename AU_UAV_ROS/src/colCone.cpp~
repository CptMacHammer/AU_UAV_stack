



#include <math.h>
#include <stdlib.h>
#include <vector>
#include <algorithm>
#include <iostream>
#include <math.h> 

#include "AU_UAV_ROS/standardFuncs.h"		// for PI, EARTH_RADIUS, MPS_SPEED
#include "AU_UAV_ROS/SimulatedPlane.h"		// for MAXIMUM_TURNING_ANGLE
#include "AU_UAV_ROS/standardDefs.h"

#define PLANE_MAX_TURN_ANGLE 22.5 //degrees / sec
#define CHECK_ZONE 10.0*MPS_SPEED //meters
#define DANGER_ZEM 3.5*MPS_SPEED //meters
#define MINIMUM_TURNING_RADIUS 28.64058013 //meters
#define DESIRED_SEPARATION 2.5*MPS_SPEED //meters

#define DEGREES_TO_RADIANS (M_PI/180.0)
#define RADIANS_TO_DEGREES (180.0/M_PI)






/* This is the function called by collisionAvoidance.cpp that calls 
all necessary functions in order to generate the new collision avoidance 
waypoint. If no collision avoidance maneuvers are necessary, the function
returns the current destination waypoint. */
AU_UAV_ROS::waypointContainer AU_UAV_ROS::findNewWaypoint(PlaneObject &plane1, std::map<int, PlaneObject> &planes){


dssdfdsf




}//findNewWayPoint






/*
  using the method described in Animesh Chakravarthy and Debasish Ghose's 1998 paper on colliison cones.
  Using part B) between a point and a circle. Plane1 is the point, and plane2 is the circle. We are trying
  to make plane1's collision cone w.r.t plane2
*/
void getCone(PlaneObject plane1, PlaneObject plane2){


	//an attempt was made to name all variables as they were referenced in the paper(Greek alphabet)

	//all the values that we get from the planes
	double alpha;  //bearing of plane1, positive from x-axis
	double beta;  //bearing of plane2
	double v1;  //velocity of plane1
	double v2;  //velocity of plane2
	double r0;    //length of LOS, distance between point and center of circle
	double theta; //angle of LOS, positve from x-axis
	double R;   //radius of circle


	//some intermediate variables need for calculations;
	double nu;
	double eta;
	double mu;
	double rho;

	double A;
	double zeta;
	double A2;
	double zeta2;





	//fill in the variables from the planes

	//bearing in plane object is 0 to 180 from quadrants 1 to 2  and 0 to -180 from quadrants 3 to 4 
	alpha = (toCartesian(plane1.getCurrentBearing()) + 360) %360;
	beta = (toCartesian(plane2.getCurrentBearing()) + 360) %360;

	v1 = MPS_SPEED;
	v2 = MPS_SPEED;

	double lat1 = plane1.getCurrentLoc().latitude;
	double lat2 = plane2.getCurrentLoc().latitude;
	double long1 = plane1.getCurrentLoc().longitude;
	double long2 = plane2.getCurrentLoc().longitude;
	double deltaLat = fabs(lat1-lat2);
	double deltaLong = fabs(lat2);
	double arg = deltaLat/deltaLong;
	
	r0 = findDistance(lat1,long1,lat2,long2);
	theta = RADIANS_TO_DEGREES*atan(arg);
	R = COLLISION_THRESHOLD;



	nu = v1/v2;
	eta = alpha - theta;
	mu = beta - theta;
	rho = R / sqrt((r0*r0)-(R*R));  

	
	A = ( rho * cos(mu) + sin(mu) )/( sqrt((rho*rho)+1) );
	zeta = RADIANS_TO_DEGREES*asin( rho/( sqrt((rho*rho)+1) ) );



	//now get N1
	double [] N1 = double [2]; //holds the lowest, highest values in the continuous set

	double test1 = cos(mu/nu);

	if(test1 >=1) {     //N1 is null
		N1[0] = 0;
		N1[1] = 0;
	}

	




}//getCone





