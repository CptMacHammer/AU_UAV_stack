/*
RIPNA.cpp

This is the implementation of RIPNA.h.
*/


#include <math.h>
#include <stdlib.h>
#include <vector>
#include <algorithm>
#include <iostream>

#include "AU_UAV_ROS/ripna.h"
#include "AU_UAV_ROS/standardFuncs.h"		// for PI, EARTH_RADIUS, MPS_SPEED
#include "AU_UAV_ROS/SimulatedPlane.h"		// for MAXIMUM_TURNING_ANGLE
//#include "AU_UAV_ROS/standardDefs.h"

#define CHATTERING_ANGLE 30.0 //degrees
//#define SECOND_THRESHOLD 1.50*MPS_SPEED //meters
#define PLANE_MAX_TURN_ANGLE 22.5 //degrees / sec
#define CHECK_ZONE 15.0*MPS_SPEED //meters
#define DANGER_ZEM 3.5*MPS_SPEED //meters
#define MINIMUM_TURNING_RADIUS 28.64058013 //meters
#define DESIRED_SEPARATION 2.5*MPS_SPEED //meters
#define LAMBDA 0.1 //dimensionless
#define TIME_STEP 1.0 //seconds
#define MINIMUM_TIME_TO_GO 100.0 //seconds





//helper function to determine if an angle is in the given interval
//all angles should be from 0-360.
//and interval from 300 to 47 is valid
bool isIn(double angle, double*interval){

	

	if(interval[0]==interval[1]){return false;}

	if(interval[0] < interval[1]){//normal interval
		if(angle >= interval[0] and angle<=interval[1]){
			//ROS_ERROR("INT1: %f, %f   B: %f", interval[0],interval[1],angle);
			return true;
		}
	}
	else{
		if(angle >= interval[0] or angle <= interval[1]){
			//ROS_ERROR("INT2: %f, %f   B: %f", interval[0],interval[1],angle);
			return true;
		}
	}
	return false;
}//isIN






/* Returns true if the original plane (plane1) should turn right to avoid plane2, 
false if otherwise. Takes original plane and its interval as parameters 

turn towatds whichever boundary of the collision cone you are closest to*/
bool goRight(double bearing1, double bearing2,double long1, double long2, double * interval) {
	

	/*if(fabs(bearing1-bearing2)<90){
		ROS_ERROR("THISS");
		if(long1 > long2){
			if(bearing1 >180){return false;}
			return true;
		}
		if(bearing1 >180){return true;}
		return false;
	}*/




	//double bearing1 = toCartesian(plane1.getCurrentBearing());

	if(isIn(bearing1,interval)){
	double sDiff = fabs(bearing1-interval[0]);
	double lDiff = fabs(bearing1-interval[1]);
	lDiff += MAXIMUM_TURNING_ANGLE;///want to make sure there is a significant difference, so there are no oscilations

	if(sDiff <= lDiff){
		return true;
	}
	return false;
	}
	return true;
}//should turn right



//assumes 1hz tel updates
double getTurningRadius(double bearing, double*interval, bool right){

	if(isIn(bearing,interval)){
	double desired = interval[1];
	if(right){desired = interval[0];}
	double diff = fabs(bearing-desired);

	if(diff>=MAXIMUM_TURNING_ANGLE-2){
		return MINIMUM_TURNING_RADIUS;
	}

	//ROS_ERROR("RAD: %f", 180*MPS_SPEED/((M_PI*diff)+1));
	return 180*MPS_SPEED/(M_PI*(diff+5));
	}
	return MINIMUM_TURNING_RADIUS;

}//turning radius





/* This is the function called by collisionAvoidance.cpp that calls 
all necessary functions in order to generate the new collision avoidance 
waypoint. If no collision avoidance maneuvers are necessary, the function
returns the current destination waypoint. */
AU_UAV_ROS::waypointContainer AU_UAV_ROS::findNewWaypoint(PlaneObject &plane1, std::map<int, PlaneObject> &planes){
	
	ROS_WARN("-----------------------------------------------------");
	/* Find plane to avoid*/
	AU_UAV_ROS::threatContainer greatestThreat = findGreatestThreat(plane1, planes);

	//if(plane1.getID() == 1){
		//ROS_ERROR("THREATID: %d", greatestThreat.planeID);
		//ROS_ERROR("DEST LAT: %f   LONG: %f", plane1.getCurrentLoc().latitude,plane1.getCurrentLoc().longitude);
		
	//}
	
	/* Unpack plane to avoid*/	
	int threatID = greatestThreat.planeID;
	//double threatZEM = greatestThreat.ZEM;
	//double timeToGo = greatestThreat.timeToGo;

	double interval[2];
	interval[0] = greatestThreat.ZEM;
	interval[1] = greatestThreat.timeToGo;


	
	AU_UAV_ROS::waypointContainer bothNewWaypoints; 	

	/* If there is no plane to avoid, then take Dubin's path to the 
	destination waypoint*/
	if (threatID < 0) {
		bothNewWaypoints.plane1WP = takeDubinsPath(plane1);
		bothNewWaypoints.plane2ID = -1;
		bothNewWaypoints.plane2WP = bothNewWaypoints.plane1WP;
		return bothNewWaypoints;
	}

	//if(plane1.getID() == 0){
	//	ROS_ERROR("HERE   ERE  THREATID: %d", greatestThreat.planeID);	
	//}

	/* If there is a plane to avoid, then figure out which direction it 
	should turn*/
	//bool turnRight = shouldTurnRight(plane1, planes[threatID]);


	double bearing = toCartesian(plane1.getCurrentBearing()) + 360;
	if(bearing > 360){bearing-=360;}

	double bearing2 = toCartesian(planes[threatID].getCurrentBearing());
	if(bearing2>360){bearing2-=360;}


	double long1 = plane1.getCurrentLoc().longitude;
	double long2 = planes[threatID].getCurrentLoc().longitude;

	//ROS_ERROR("INTERVAL: %f,  %f  b: %f",interval[0],interval[1], bearing);

	bool turnRight = goRight(bearing,bearing2,long1,long2,interval);
	//bool turnRight = true;
	/*if(plane1.getID()==2 or plane1.getID()==1){	
	int x = 0;
	if(turnRight){x=1;}
	ROS_ERROR("Right%d: %d",plane1.getID(), x); }*/

	double turningRadius = getTurningRadius(bearing,interval,turnRight);//MINIMUM_TURNING_RADIUS;
	//double turningRadius = 	MINIMUM_TURNING_RADIUS*1.2;

	//if(plane1.getID()==0){ROS_ERROR("RAD: %f",turningRadius);}

	/* Calculate turning radius to avoid collision*/
	//double turningRadius = calculateTurningRadius(threatZEM);

	/* Given turning radius and orientation of the plane, calculate 
	next collision avoidance waypoint*/
	AU_UAV_ROS::waypoint plane1WP = calculateWaypoint(plane1, turningRadius, turnRight);

	/* Cooperative planning*/
	//bothNewWaypoints.plane2ID = -1;
	//bothNewWaypoints.plane2WP = plane1WP;

	if (false){//(findGreatestThreat(planes[threatID], planes).planeID == plane1.getID()) {		
			//ROS_WARN("Planes %d and %d are each other's greatest threats", plane1.getID(), threatID);
			//ROS_WARN("Time to go = %f | ZEM = %f", timeToGo, threatZEM);
			//ROS_WARN("Plane %d bearing = %f | %d", plane1.getID(), plane1.getCurrentBearing(), turnRight);
			//ROS_WARN("Plane %d bearing = %f | %d", threatID, planes[threatID].getCurrentBearing(), turnRight);

		AU_UAV_ROS::waypoint plane2WP = calculateWaypoint(planes[threatID], turningRadius, turnRight);
		bothNewWaypoints.plane2WP = plane2WP;
		bothNewWaypoints.plane2ID = threatID;
		//if(threatID==1){	
		//	int x = 0;
		//	if(turnRight){x=1;}
		//	ROS_ERROR("Right: %d", x); 
		//}
	}
	else{
		bothNewWaypoints.plane2ID = -1;
	} 
	bothNewWaypoints.plane1WP = plane1WP;
	

	//bothNewWaypoints.plane2ID = -1;

	return bothNewWaypoints;
}///find new waypoint




//void getCone(AU_UAV_ROS::PlaneObject plane1,AU_UAV_ROS::PlaneObject plane2, double *N);


AU_UAV_ROS::threatContainer AU_UAV_ROS::findGreatestThreat(PlaneObject &plane1, std::map<int, PlaneObject> &planes){

	int threatID = -1;
	double minDist = 100000;
	double bearing1 = toCartesian(plane1.getCurrentBearing()) + 360;
	if(bearing1>360){bearing1-=360;}
	double interval [2];
	double threatInt [2] = {0,0};
	double dist;	
	int id;
	PlaneObject plane2;

	std::map<int,AU_UAV_ROS::PlaneObject>::iterator it;
	for ( it=planes.begin() ; it!= planes.end(); it++ ){
		id = (*it).first;
		plane2 = (*it).second;
		
		if(id == plane1.getID()){continue;}
		
		dist = findDistance(plane1.getCurrentLoc().latitude, plane1.getCurrentLoc().longitude, 
			plane2.getCurrentLoc().latitude, plane2.getCurrentLoc().longitude);

		//if(plane1.getID()==3 and plane2.getID()==1){ROS_ERROR("DIST: %f",dist);}
		//remove planes upon collision
		if(dist < COLLISION_THRESHOLD){
			std::map<int,AU_UAV_ROS::PlaneObject>::iterator itd;
			itd = planes.find(id);
			planes.erase(itd);
			itd = planes.find(plane1.getID());
			planes.erase(itd);
			break;
		}




		if(dist < CHECK_ZONE){
			getCone(plane1,plane2,interval);
			//if(plane1.getID()==3 or plane1.getID()==1){ROS_ERROR("CONE %d  %d: %f, %f  : %f",plane1.getID(),plane2.getID(), interval[0],interval[1], bearing1);	}
			//if(plane2.getID()==-11){
			//	ROS_ERROR("DELETED PLANE");
			//	continue;
			//}

			if(isIn(bearing1,interval) or dist <= 3.0*COLLISION_THRESHOLD){//this plane is a threat
				//ROS_ERROR("THREAT");
				if(dist < minDist){
					threatID = id; 
					minDist = dist;
					threatInt[0] = interval[0];
					threatInt[1] = interval[1];
				}
			}//is a threat
		}//in check zone
	}//for

	AU_UAV_ROS::threatContainer greatestThreat;
	greatestThreat.planeID = threatID;
	//greatestThreat.ZEM = mostDangerousZEM;
	//greatestThreat.timeToGo = minimumTimeToGo;
	greatestThreat.ZEM = threatInt[0];
	greatestThreat.timeToGo = threatInt[1];


	//if(plane1.getID()==2){	ROS_ERROR("THREATID: %d", threatID); }
	return greatestThreat;


}//greatestthreat


/* Returns true if the original plane (plane1) should turn right to avoid plane2, 
false if otherwise. Takes original plane and its greatest threat as parameters */
bool AU_UAV_ROS::shouldTurnRight(PlaneObject &plane1, PlaneObject &plane2) {
	
	/* For checking whether the plane should turn right or left */
	double theta, theta_dot, R;
	double cartBearing1 = toCartesian(plane1.getCurrentBearing());
	double cartBearing2 = toCartesian(plane2.getCurrentBearing());
	double V = MPS_SPEED;
	
	/* Calculate theta, theta1, and theta2. Theta is the cartesian angle
	from 0 degrees (due East) to plane2 (using plane1 as the origin). This 
	may be referred to as the LOS angle. */
	theta = findAngle(plane1.getCurrentLoc().latitude, plane1.getCurrentLoc().longitude, 
		plane2.getCurrentLoc().latitude, plane2.getCurrentLoc().longitude);
	R = findDistance(plane1.getCurrentLoc().latitude, plane1.getCurrentLoc().longitude, 
		plane2.getCurrentLoc().latitude, plane2.getCurrentLoc().longitude);
	theta_dot = (V*sin((cartBearing2 - theta)*PI/180) - V*sin((cartBearing1 - theta)*PI/180)) / R;

	if (theta_dot >= 0) return true;
	else return false;

}

/* Calculate the turning radius based on the zero effort miss*/
double AU_UAV_ROS::calculateTurningRadius(double ZEM){
	double l = LAMBDA;
	double ds = DESIRED_SEPARATION;
	return MINIMUM_TURNING_RADIUS*exp(l*ZEM/ds);
}

/* Link to help calculate intersection of circles and therefore the new 
waypoint location: http://local.wasp.uwa.edu.au/~pbourke/geometry/2circle/ */

/* Find the new collision avoidance waypoint for the plane to go to */
AU_UAV_ROS::waypoint AU_UAV_ROS::calculateWaypoint(PlaneObject &plane1, double turningRadius, bool turnRight){

	AU_UAV_ROS::waypoint wp;	
	double V = MPS_SPEED;
	double delta_T = TIME_STEP;	
	double cartBearing = toCartesian(plane1.getCurrentBearing())* PI/180;
	double delta_psi = V / turningRadius * delta_T;
	if (turnRight) delta_psi *= -1.0;
	ROS_WARN("Delta psi: %f", delta_psi);
	double psi = (cartBearing + delta_psi);
	wp.longitude = plane1.getCurrentLoc().longitude + V*cos(psi)/DELTA_LON_TO_METERS;
	wp.latitude = plane1.getCurrentLoc().latitude + V*sin(psi)/DELTA_LAT_TO_METERS;
	wp.altitude = plane1.getCurrentLoc().altitude;
	ROS_WARN("Plane%d new cbearing: %f", plane1.getID(), toCardinal( findAngle(plane1.getCurrentLoc().latitude, plane1.getCurrentLoc().longitude, wp.latitude, wp.longitude) ) ); 
	//ROS_WARN("Plane%d calc lat: %f lon: %f w/ act lat: %f lon: %f", plane1.getID(), wp.latitude, wp.longitude, plane1.getCurrentLoc().latitude, plane1.getCurrentLoc().longitude);
	
	return wp;
}


/* This function is calculates any maneuvers that are necessary for the 
current plane to avoid looping. Returns a waypoint based on calculations. 
If no maneuvers are necessary, then the function returns the current 
destination*/
AU_UAV_ROS::waypoint AU_UAV_ROS::takeDubinsPath(PlaneObject &plane1) {
	/* Initialize variables*/
	AU_UAV_ROS::coordinate circleCenter;
	AU_UAV_ROS::waypoint wp = plane1.getDestination();
	double minTurningRadius = 0.75*MINIMUM_TURNING_RADIUS;
	bool destOnRight;
	/* Calculate cartesian angle from plane to waypoint*/
	double wpBearing = findAngle(plane1.getCurrentLoc().latitude, 
		plane1.getCurrentLoc().longitude, wp.latitude, wp.longitude);
	/* Calculate cartesian current bearing of plane (currentBearing is stored as Cardinal)*/
	double currentBearingCardinal = plane1.getCurrentBearing();	
	double currentBearingCartesian = toCartesian(currentBearingCardinal);
	
	
	if (fabs(currentBearingCardinal) < 90.0)
	/* Figure out which side of the plane the waypoint is on*/		
		if ((wpBearing < currentBearingCartesian) && 
				(wpBearing > manipulateAngle(currentBearingCartesian - 180.0)))
			destOnRight = true;
		else destOnRight = false;
	else
		if ((wpBearing > currentBearingCartesian) && 
				(wpBearing < manipulateAngle(currentBearingCartesian - 180.0)))
			destOnRight = false;
		else destOnRight = true;
	/* Calculate the center of the circle of minimum turning radius on the side that the waypoint is on*/
	
	circleCenter = calculateLoopingCircleCenter(plane1, minTurningRadius, destOnRight);

	/* If destination is inside circle, must fly opposite direction before we can reach destination*/
	if (findDistance(circleCenter.latitude, circleCenter.longitude, wp.latitude, wp.longitude) < 
			minTurningRadius) {
		//ROS_ERROR("DUBINS CHANGE");
		return calculateWaypoint(plane1, minTurningRadius, !destOnRight);
	}
	else {
		//we can simply pass the current waypoint because it's accessible
		//ROS_WARN("FINE: %f", findDistance(circleCenter.latitude, circleCenter.longitude, wp.latitude, wp.longitude));
		return wp;
	}
}



AU_UAV_ROS::coordinate AU_UAV_ROS::calculateLoopingCircleCenter(PlaneObject &plane, double turnRadius, bool turnRight) {
	AU_UAV_ROS::coordinate circleCenter;
	circleCenter.altitude = plane.getCurrentLoc().altitude;
	double angle;
	if (turnRight) {
		angle = (toCartesian(plane.getCurrentBearing()) - 90 - 22.5) * PI/180.0; 
	}
	else {
		angle = (toCartesian(plane.getCurrentBearing()) + 90 + 22.5) * PI/180.0;
	}
	double xdiff = turnRadius*cos(angle);
	double ydiff = turnRadius*sin(angle);
	circleCenter.longitude = plane.getCurrentLoc().longitude + xdiff/DELTA_LON_TO_METERS;
	circleCenter.latitude = plane.getCurrentLoc().latitude + ydiff/DELTA_LAT_TO_METERS; 

	return circleCenter;
}





































































/*
  using the method described in Animesh Chakravarthy and Debasish Ghose's 1998 paper on colliison cones.
  Using part B) between a point and a circle. Plane1 is the point, and plane2 is the circle. We are trying
  to make plane1's collision cone w.r.t plane2
*/










//helper function to get the set N21 as explained in the paper
//return true if N22 = n: n<N22[0] or n>N22[1]
//       false if N22 = n: N22[0] <  n  < N22[1]

bool getN21(double A, double zeta, double nu, double eta, double *N21){

	//double [] N21 = [3];

	double eta1;
	double eta2;
	bool outside = false;

	double test = A/nu;
	

	if(test>1){
		N21[0] = 0;
		N21[1] = 0;
	}
	else if(test >= 0){//it must be <=1
		//38
		eta1 = asin(test) - zeta;
		eta2 = M_PI - asin(test) - zeta;

		N21[0] =  RADIANS_TO_DEGREES*eta1;
		N21[1] =  RADIANS_TO_DEGREES*eta2;
	}
	else if(test > -1){ //must be <0
		//39
		eta1 = asin(test) - zeta;
		eta2 = -M_PI - asin(test) - zeta;

		N21[0] =  RADIANS_TO_DEGREES*eta1;
		N21[1] =  RADIANS_TO_DEGREES*eta2;
		outside = true;
	}
	else{//must be <= -1
		N21[0] = 0;
		N21[1] = 360;		
	}
	


	return outside;

}//getN21




//helper function to get the set N22 as explained in the paper
//return true if N22 = n: n<N22[0] or n>N22[1]
//       false if N22 = n: N22[0] <  n  < N22[1]
 
bool getN22(double A1, double zeta1, double nu, double eta,double *N22){

	//double [] N22 = [3];

	double eta1;
	double eta2;
	bool outside = false; //

	double test = A1/nu;
	
	

	if(test>1){ //null
		N22[0] = 0;
		N22[1] = 0;
	}
	else if(test >= 0){//it must be <=1
		//38
		eta1 = asin(test) - zeta1;
		eta2 = M_PI - asin(test) - zeta1;

		N22[0] =  RADIANS_TO_DEGREES*eta1;
		N22[1] =  RADIANS_TO_DEGREES*eta2;
	}
	else if(test > -1){ //must be <0
		//39
		eta1 = asin(test) - zeta1;
		eta2 = -M_PI - asin(test) - zeta1;

		N22[0] =  RADIANS_TO_DEGREES*eta1;
		N22[1] =  RADIANS_TO_DEGREES*eta2;
		outside = true;
	}
	else{//must be <= -1
		N22[0] = 0;
		N22[1] = 360;		
	}	

	return outside;


}//getN21





/*
  using the method described in Animesh Chakravarthy and Debasish Ghose's 1998 paper on colliison cones.
  Using part B) between a point and a circle. Plane1 is the point, and plane2 is the circle. We are trying
  to make plane1's collision cone w.r.t plane2
*/
void AU_UAV_ROS::getCone(PlaneObject plane1,PlaneObject plane2, double *N){


	//an attempt was made to name all variables as they were referenced in the paper(Greek alphabet)

	//all the values that we get from the planes
	double alpha;  //bearing of plane1, positive from x-axis
	double beta;  //bearing of plane2
	double v1;  //velocity of plane1
	double v2;  //velocity of plane2
	double r0;    //length of LOS, distance between point and center of circle
	double theta; //angle of LOS, positve from x-axis
	double R;   //radius of circle


	//some intermediate variables need for calculations;
	double nu;
	double eta;
	double mu;
	double rho;

	double A;
	double zeta;
	double A1;
	double zeta1;


	double N1 [2];
	double N21 [2];
	double N22 [2];
	double N2int [2];
	//double N [2];
	bool outside = false;



	//fill in the variables from the planes

	//alpha = bearing1;
	//beta = bearing2;

	//bearing in plane object is 0 to 180 from quadrants 1 to 2  and 0 to -180 from quadrants 3 to 4 
	alpha = (toCartesian(plane1.getCurrentBearing()) + 360);
	if(alpha>360){alpha -= 360;}	
	beta = (toCartesian(plane2.getCurrentBearing()) + 360) ;
	if(beta>360){beta -= 360;}


	v1 = MPS_SPEED+.001;
	v2 = MPS_SPEED;

	double lat1 = plane1.getCurrentLoc().latitude;
	double lat2 = plane2.getCurrentLoc().latitude;
	double long1 = plane1.getCurrentLoc().longitude;
	double long2 = plane2.getCurrentLoc().longitude;
	double deltaLat = fabs(lat1-lat2);
	double deltaLong = fabs(lat2);
	double arg = deltaLat/deltaLong;
	
	r0 =  findDistance(lat1,long1,lat2,long2);
	//theta = RADIANS_TO_DEGREES*atan(arg);
	theta = findAngle(lat1,long1,lat2,long2);
	R = COLLISION_THRESHOLD*3.0;


	//26
	nu = v1/v2;
	eta = alpha - theta;
	mu = beta - theta;
	rho = R / sqrt((r0*r0)-(R*R));  

	double x = cos(mu*DEGREES_TO_RADIANS);

	//35 , 43
	A = ( rho * cos(mu*DEGREES_TO_RADIANS) + sin(mu*DEGREES_TO_RADIANS) )/( sqrt((rho*rho)+1) );
	A1 = ( rho * cos(mu*DEGREES_TO_RADIANS) - sin(mu*DEGREES_TO_RADIANS) )/( sqrt((rho*rho)+1) );
	zeta = RADIANS_TO_DEGREES*asin( rho/( sqrt((rho*rho)+1) ) );  // help
	zeta1 = RADIANS_TO_DEGREES*asin( rho/( sqrt((rho*rho)+1) ) ); // help
	zeta1 = RADIANS_TO_DEGREES*acos( -1/( sqrt((rho*rho)+1) ) ); // help


	//now get N1
	//double N1[2]; //holds the lowest, highest values in the continuous set

	double test1 = cos(mu/nu);

	if(test1 >=1) {     //N1 is null
		ROS_ERROR("HEREa");
		N1[0] = 0;
		N1[1] = 0;
	}
	else if(test1<1 && test1 >= -1){ //N1 exists but is restricted
		//ROS_ERROR("HERE1a");
		N1[0] = RADIANS_TO_DEGREES*-acos(cos(mu*DEGREES_TO_RADIANS)/nu);
		N1[1] = RADIANS_TO_DEGREES*acos(cos(mu*DEGREES_TO_RADIANS)/nu);   // ****************************  should make all positive angles
	}
	else{ //test1 < -1
		ROS_ERROR("HERE2a");
		N1[0] = 0;
		N1[1] = 360;
	}


	printf("N1: %f, %f\n", N1[0],N1[1]);

	//before we do any unnecessary work. see what N21 interesect N22 is supposed to be


	

	bool do21 = false;
	bool do22 = false;
	
	double test2 = A/nu;
	double test2a = A1/nu;	


	double eta1 = (RADIANS_TO_DEGREES*asin(test2)) - zeta;
	//double eta2 = M_PI - asin(test2) - zeta;
	double eta2 = 180 - RADIANS_TO_DEGREES*asin(test2) - zeta;

	double eta11 = RADIANS_TO_DEGREES*asin(test2a) - zeta1;
	double eta21 = 180 - RADIANS_TO_DEGREES*asin(test2a) - zeta1;




	if(test2 >1 or test2a >1){
		ROS_ERROR("HEREb");
		N2int[0] = 0;
		N2int[0] = 0;
	}
	else if( test2>-1    and   test2a >-1){ //they must both be <= 1 at this point

		if(nu>1){    //should not happen with constant MPS_SPEED
			//printf("ERROR! : NOT SAME SPEED\n");
			//ROS_ERROR("HERE1b");
			N2int[0] = eta1;
			N2int[1] = eta21;
		}
		else if(nu<1){	//should not happen with constant MPS_SPEED
			printf("ERROR! : NOTttttt SAME SPEED\n");
			ROS_ERROR("HERE2b");
			N2int[0] = eta11;
			N2int[1] = eta2;
		}
		else{
			ROS_ERROR("HERE3b");
			N2int[0] = 0;
			N2int[1] = 0;
		}

	}//both in range (-1,1]
	else{ //they must both be <= 1 at this point
		if(test2<=-1 and test2a>-1){
			ROS_ERROR("HERE4b");
			//do22 = true;	//N2int = N22
			outside = getN22(A1,zeta1,nu,eta,N2int);
		}
		else if(test2>-1 and test2a <-1){
			ROS_ERROR("HERE5b");
			//do21 = true;    //N2int = N21
			outside = getN21(A,zeta,nu,eta,N2int);
		}
		else{
			//ROS_ERROR("HERE6b");
			N2int[0] = 0;
			N2int[1] = 360;			
		}

	}//else


	//printf("N2int: %f, %f\n", N2int[0],N2int[1]);


	//now find intersection of N1 and N2int (N1 int (N21 int N22))

	//if N2int is a single interval
	if(!outside){
		//get the first (lower) number
		if(N1[0] >= N2int[0] and N1[0] <= N2int[1] ){
			ROS_ERROR("HEREc");
			N[0] = N1[0];
		}
		else if(N2int[0] >= N1[0] and N2int[0] <= N1[1]){
			//ROS_ERROR("HERE1c");
			N[0] = N2int[0];
		}
		else{//there is no inersection
			ROS_ERROR("HERE2c");
			N[0] = N[1] = 0;
		}

		//get the second(higher) number
		if(N1[1] <= N2int[1] and N1[1] >= N2int[0]){
			N[1] = N1[1];
		}
		else if(N2int[1] <= N1[1] and N2int[1] >= N1[0] ){
			N[1] = N2int[1];
		}
	}//!outside
	else{
		ROS_ERROR("ERROR: OUTSIDE\n");
	}


	if(N[0] == 0 and N[1]== 0){}
	else{
		N[0] += theta;
		N[1] += theta;
	}

	N[0] += 360;
	N[1] += 360;
	if(N[0]>360){N[0] -= 360;}
	if(N[1]>360){N[1] -= 360;}


	//ROS_ERROR("CONE %d: %f, %f  : %f",plane1.getID(), N[0],N[1], alpha);


}//getCone


